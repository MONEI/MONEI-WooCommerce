<?php
declare(strict_types=1);

namespace App\DTO;

use Articus\DataTransfer\Annotation as DTA;

/**
 */
class CreatePaymentRequest
{
    /**
     * Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD).
     * @DTA\Data(field="amount")
     * @DTA\Validator(name="Scalar", options={"type":"int"})
     * @var int|null
     */
    public $amount;

    /**
     * Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency.
     * @DTA\Data(field="currency")
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $currency;

    /**
     * An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system.
     * @DTA\Data(field="orderId")
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $order_id;

    /**
     * The URL to which a payment result should be sent asynchronously.
     * @DTA\Data(field="callbackUrl", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $callback_url;

    /**
     * The URL the customer will be directed to after transaction completed (successful or failed - except if &#x60;failUrl&#x60; is provided).
     * @DTA\Data(field="completeUrl", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $complete_url;

    /**
     * The URL the customer will be directed to after transaction has failed, instead of &#x60;completeUrl&#x60; (used in hosted payment page). This allows to provide two different URLs for successful and failed payments.
     * @DTA\Data(field="failUrl", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $fail_url;

    /**
     * The URL the customer will be directed to if they decide to cancel payment and return to your website (used in hosted payment page).
     * @DTA\Data(field="cancelUrl", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $cancel_url;

    /**
     * A payment token generated by monei.js [Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken [saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method). In case of the first one, you will also need to send the &#x60;sessionId&#x60; used to generate the token in the first place.
     * @DTA\Data(field="paymentToken", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $payment_token;

    /**
     * A unique identifier within your system that adds security to the payment process. You need to pass the same session ID as the one used on the frontend to initialize MONEI Component (if you needed to). This is required if a payment token (not permanent) was already generated in the frontend.
     * @DTA\Data(field="sessionId", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $session_id;

    /**
     * If set to true a permanent token that represents a payment method used in the payment will be generated.
     * @DTA\Data(field="generatePaymentToken", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"bool"})
     * @var bool|null
     */
    public $generate_payment_token;

    /**
     * @DTA\Data(field="paymentMethod", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentPaymentMethodInput::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentPaymentMethodInput::class})
     * @var \App\DTO\PaymentPaymentMethodInput|null
     */
    public $payment_method;

    /**
     * @DTA\Data(field="allowedPaymentMethods", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentPaymentMethods::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentPaymentMethods::class})
     * @var \App\DTO\PaymentPaymentMethods|null
     */
    public $allowed_payment_methods;

    /**
     * @DTA\Data(field="transactionType", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentTransactionType::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentTransactionType::class})
     * @var \App\DTO\PaymentTransactionType|null
     */
    public $transaction_type;

    /**
     * @DTA\Data(field="sequence", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentSequence::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentSequence::class})
     * @var \App\DTO\PaymentSequence|null
     */
    public $sequence;

    /**
     * A unique identifier of the Point of Sale. If specified the payment is attached to this Point of Sale. If there is a QR code attached to the same Point of Sale, this payment will be available by scanning the QR code.
     * @DTA\Data(field="pointOfSaleId", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $point_of_sale_id;

    /**
     * A unique identifier of the Subscription. If specified the payment is attached to this Subscription.
     * @DTA\Data(field="subscriptionId", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $subscription_id;

    /**
     * If set to &#x60;true&#x60;, the new payment will be automatically created when customer visits the payment link of the previously failed payment. Is automatically set to &#x60;true&#x60; if &#x60;completeUrl&#x60; is not provided.(set this value to &#x60;true&#x60; to create \&quot;Pay By Link\&quot; payments).
     * @DTA\Data(field="autoRecover", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"bool"})
     * @var bool|null
     */
    public $auto_recover;

    /**
     * An arbitrary string attached to the payment. Often useful for displaying to users.
     * @DTA\Data(field="description", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"string"})
     * @var string|null
     */
    public $description;

    /**
     * @DTA\Data(field="customer", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentCustomer::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentCustomer::class})
     * @var \App\DTO\PaymentCustomer|null
     */
    public $customer;

    /**
     * @DTA\Data(field="billingDetails", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentBillingDetails::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentBillingDetails::class})
     * @var \App\DTO\PaymentBillingDetails|null
     */
    public $billing_details;

    /**
     * @DTA\Data(field="shippingDetails", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentShippingDetails::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentShippingDetails::class})
     * @var \App\DTO\PaymentShippingDetails|null
     */
    public $shipping_details;

    /**
     * @DTA\Data(field="sessionDetails", nullable=true)
     * @DTA\Strategy(name="Object", options={"type":\App\DTO\PaymentSessionDetails::class})
     * @DTA\Validator(name="TypeCompliant", options={"type":\App\DTO\PaymentSessionDetails::class})
     * @var \App\DTO\PaymentSessionDetails|null
     */
    public $session_details;

    /**
     * Payment expiration time.
     * @DTA\Data(field="expireAt", nullable=true)
     * @DTA\Validator(name="Scalar", options={"type":"float"})
     * @var float|null
     */
    public $expire_at;

}
