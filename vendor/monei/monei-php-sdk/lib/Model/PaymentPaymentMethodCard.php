<?php
/**
 * PaymentPaymentMethodCard
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a>. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p> <h4 id=\"base-url\">Base URL:</h4> <p><a href=\"https://api.monei.com/v1\">https://api.monei.com/v1</a></p> <h4 id=\"client-libraries\">Client libraries:</h4> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman</a></li> </ul> <h4 id=\"important\">Important:</h4> <p><strong>If you are not using our official SDKs, you need to provide a valid <code>User-Agent</code> header in each request, otherwise your requests will be rejected.</strong></p>
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentPaymentMethodCard Class Doc Comment
 *
 * @category Class
 * @description Details about the card used as payment method at the time of the transaction.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentPaymentMethodCard implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment-PaymentMethodCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'brand' => 'string',
        'type' => 'string',
        'three_d_secure' => 'bool',
        'three_d_secure_version' => 'string',
        'three_d_secure_flow' => 'string',
        'expiration' => 'int',
        'last4' => 'string',
        'tokenization_method' => 'string',
        'cardholder_name' => 'string',
        'cardholder_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'brand' => null,
        'type' => null,
        'three_d_secure' => null,
        'three_d_secure_version' => null,
        'three_d_secure_flow' => null,
        'expiration' => 'int64',
        'last4' => null,
        'tokenization_method' => null,
        'cardholder_name' => null,
        'cardholder_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'brand' => 'brand',
        'type' => 'type',
        'three_d_secure' => 'threeDSecure',
        'three_d_secure_version' => 'threeDSecureVersion',
        'three_d_secure_flow' => 'threeDSecureFlow',
        'expiration' => 'expiration',
        'last4' => 'last4',
        'tokenization_method' => 'tokenizationMethod',
        'cardholder_name' => 'cardholderName',
        'cardholder_email' => 'cardholderEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'brand' => 'setBrand',
        'type' => 'setType',
        'three_d_secure' => 'setThreeDSecure',
        'three_d_secure_version' => 'setThreeDSecureVersion',
        'three_d_secure_flow' => 'setThreeDSecureFlow',
        'expiration' => 'setExpiration',
        'last4' => 'setLast4',
        'tokenization_method' => 'setTokenizationMethod',
        'cardholder_name' => 'setCardholderName',
        'cardholder_email' => 'setCardholderEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'brand' => 'getBrand',
        'type' => 'getType',
        'three_d_secure' => 'getThreeDSecure',
        'three_d_secure_version' => 'getThreeDSecureVersion',
        'three_d_secure_flow' => 'getThreeDSecureFlow',
        'expiration' => 'getExpiration',
        'last4' => 'getLast4',
        'tokenization_method' => 'getTokenizationMethod',
        'cardholder_name' => 'getCardholderName',
        'cardholder_email' => 'getCardholderEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BRAND_VISA = 'visa';
    public const BRAND_MASTERCARD = 'mastercard';
    public const BRAND_DINERS = 'diners';
    public const BRAND_AMEX = 'amex';
    public const BRAND_JCB = 'jcb';
    public const BRAND_UNIONPAY = 'unionpay';
    public const BRAND_UNKNOWN = 'unknown';
    public const TYPE_DEBIT = 'debit';
    public const TYPE_CREDIT = 'credit';
    public const THREE_D_SECURE_FLOW_CHALLENGE = 'CHALLENGE';
    public const THREE_D_SECURE_FLOW_FRICTIONLESS = 'FRICTIONLESS';
    public const THREE_D_SECURE_FLOW_FRICTIONLESS_CHALLENGE = 'FRICTIONLESS_CHALLENGE';
    public const THREE_D_SECURE_FLOW_DIRECT = 'DIRECT';
    public const TOKENIZATION_METHOD_APPLE_PAY = 'applePay';
    public const TOKENIZATION_METHOD_GOOGLE_PAY = 'googlePay';
    public const TOKENIZATION_METHOD_CLICK_TO_PAY = 'clickToPay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBrandAllowableValues()
    {
        return [
            self::BRAND_VISA,
            self::BRAND_MASTERCARD,
            self::BRAND_DINERS,
            self::BRAND_AMEX,
            self::BRAND_JCB,
            self::BRAND_UNIONPAY,
            self::BRAND_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DEBIT,
            self::TYPE_CREDIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getThreeDSecureFlowAllowableValues()
    {
        return [
            self::THREE_D_SECURE_FLOW_CHALLENGE,
            self::THREE_D_SECURE_FLOW_FRICTIONLESS,
            self::THREE_D_SECURE_FLOW_FRICTIONLESS_CHALLENGE,
            self::THREE_D_SECURE_FLOW_DIRECT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTokenizationMethodAllowableValues()
    {
        return [
            self::TOKENIZATION_METHOD_APPLE_PAY,
            self::TOKENIZATION_METHOD_GOOGLE_PAY,
            self::TOKENIZATION_METHOD_CLICK_TO_PAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = $data['country'] ?? null;
        $this->container['brand'] = $data['brand'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['three_d_secure'] = $data['three_d_secure'] ?? null;
        $this->container['three_d_secure_version'] = $data['three_d_secure_version'] ?? null;
        $this->container['three_d_secure_flow'] = $data['three_d_secure_flow'] ?? null;
        $this->container['expiration'] = $data['expiration'] ?? null;
        $this->container['last4'] = $data['last4'] ?? null;
        $this->container['tokenization_method'] = $data['tokenization_method'] ?? null;
        $this->container['cardholder_name'] = $data['cardholder_name'] ?? null;
        $this->container['cardholder_email'] = $data['cardholder_email'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBrandAllowableValues();
        if (!is_null($this->container['brand']) && !in_array($this->container['brand'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'brand', must be one of '%s'",
                $this->container['brand'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getThreeDSecureFlowAllowableValues();
        if (!is_null($this->container['three_d_secure_flow']) && !in_array($this->container['three_d_secure_flow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'three_d_secure_flow', must be one of '%s'",
                $this->container['three_d_secure_flow'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTokenizationMethodAllowableValues();
        if (!is_null($this->container['tokenization_method']) && !in_array($this->container['tokenization_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tokenization_method', must be one of '%s'",
                $this->container['tokenization_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Card brand.
     *
     * @return self
     */
    public function setBrand($brand)
    {
        $allowedValues = $this->getBrandAllowableValues();
        if (!is_null($brand) && !in_array($brand, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'brand', must be one of '%s'",
                    $brand,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Card type `debit` or `credit`.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets three_d_secure
     *
     * @return bool|null
     */
    public function getThreeDSecure()
    {
        return $this->container['three_d_secure'];
    }

    /**
     * Sets three_d_secure
     *
     * @param bool|null $three_d_secure Whether this transaction used 3D Secure authentication.
     *
     * @return self
     */
    public function setThreeDSecure($three_d_secure)
    {
        $this->container['three_d_secure'] = $three_d_secure;

        return $this;
    }

    /**
     * Gets three_d_secure_version
     *
     * @return string|null
     */
    public function getThreeDSecureVersion()
    {
        return $this->container['three_d_secure_version'];
    }

    /**
     * Sets three_d_secure_version
     *
     * @param string|null $three_d_secure_version The protocol version of the 3DS challenge.
     *
     * @return self
     */
    public function setThreeDSecureVersion($three_d_secure_version)
    {
        $this->container['three_d_secure_version'] = $three_d_secure_version;

        return $this;
    }

    /**
     * Gets three_d_secure_flow
     *
     * @return string|null
     */
    public function getThreeDSecureFlow()
    {
        return $this->container['three_d_secure_flow'];
    }

    /**
     * Sets three_d_secure_flow
     *
     * @param string|null $three_d_secure_flow The flow used for 3DS authentication. - `CHALLENGE` - In a challenge flow, the issuer requires additional shopper interaction, either through biometrics, two-factor authentication, or similar methods based on [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) factors. - `FRICTIONLESS` - In a frictionless flow, the acquirer, issuer, and card scheme exchange all necessary     information in the background through passive authentication using the shopper's device     fingerprint. The transaction is completed without further shopper interaction. - `FRICTIONLESS_CHALLENGE` - This flow is the complete 3DS flow. It is similar to the 3DS frictionless flow but     includes an additional authentication step (challenge) that will be invoked if the     information provided in the data collection step does not suffice to determine the     risk-level of the transaction. - `DIRECT` - This transaction did not require [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) due to the low risk
     *
     * @return self
     */
    public function setThreeDSecureFlow($three_d_secure_flow)
    {
        $allowedValues = $this->getThreeDSecureFlowAllowableValues();
        if (!is_null($three_d_secure_flow) && !in_array($three_d_secure_flow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'three_d_secure_flow', must be one of '%s'",
                    $three_d_secure_flow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['three_d_secure_flow'] = $three_d_secure_flow;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return int|null
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param int|null $expiration Time at which the card will expire. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets last4
     *
     * @return string|null
     */
    public function getLast4()
    {
        return $this->container['last4'];
    }

    /**
     * Sets last4
     *
     * @param string|null $last4 The last four digits of the card.
     *
     * @return self
     */
    public function setLast4($last4)
    {
        $this->container['last4'] = $last4;

        return $this;
    }

    /**
     * Gets tokenization_method
     *
     * @return string|null
     */
    public function getTokenizationMethod()
    {
        return $this->container['tokenization_method'];
    }

    /**
     * Sets tokenization_method
     *
     * @param string|null $tokenization_method The digital wallet used to tokenize the card.
     *
     * @return self
     */
    public function setTokenizationMethod($tokenization_method)
    {
        $allowedValues = $this->getTokenizationMethodAllowableValues();
        if (!is_null($tokenization_method) && !in_array($tokenization_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tokenization_method', must be one of '%s'",
                    $tokenization_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tokenization_method'] = $tokenization_method;

        return $this;
    }

    /**
     * Gets cardholder_name
     *
     * @return string|null
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     *
     * @param string|null $cardholder_name The name of the cardholder.
     *
     * @return self
     */
    public function setCardholderName($cardholder_name)
    {
        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets cardholder_email
     *
     * @return string|null
     */
    public function getCardholderEmail()
    {
        return $this->container['cardholder_email'];
    }

    /**
     * Sets cardholder_email
     *
     * @param string|null $cardholder_email The email of the cardholder.
     *
     * @return self
     */
    public function setCardholderEmail($cardholder_email)
    {
        $this->container['cardholder_email'] = $cardholder_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


