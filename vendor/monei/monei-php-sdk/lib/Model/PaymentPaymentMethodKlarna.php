<?php
/**
 * PaymentPaymentMethodKlarna
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a>. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p> <h4 id=\"base-url\">Base URL:</h4> <p><a href=\"https://api.monei.com/v1\">https://api.monei.com/v1</a></p> <h4 id=\"client-libraries\">Client libraries:</h4> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman</a></li> </ul> <h4 id=\"important\">Important:</h4> <p><strong>If you are not using our official SDKs, you need to provide a valid <code>User-Agent</code> header in each request, otherwise your requests will be rejected.</strong></p>
 *
 * The version of the OpenAPI document: 1.4.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentPaymentMethodKlarna Class Doc Comment
 *
 * @category Class
 * @description Details from Klarna order used as payment method at the time of the transaction.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentPaymentMethodKlarna implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment-PaymentMethodKlarna';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_category' => 'Enum',
        'auth_payment_method' => 'Enum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_category' => null,
        'auth_payment_method' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_category' => 'billingCategory',
        'auth_payment_method' => 'authPaymentMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_category' => 'setBillingCategory',
        'auth_payment_method' => 'setAuthPaymentMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_category' => 'getBillingCategory',
        'auth_payment_method' => 'getAuthPaymentMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BILLING_CATEGORY_PAY_LATER = 'PAY_LATER';
    public const BILLING_CATEGORY_PAY_NOW = 'PAY_NOW';
    public const BILLING_CATEGORY_SLICE_IT = 'SLICE_IT';
    public const BILLING_CATEGORY_SLICE_IT_BY_CARD = 'SLICE_IT_BY_CARD';
    public const AUTH_PAYMENT_METHOD_INVOICE = 'invoice';
    public const AUTH_PAYMENT_METHOD_FIXED_AMOUNT = 'fixed_amount';
    public const AUTH_PAYMENT_METHOD_PIX = 'pix';
    public const AUTH_PAYMENT_METHOD_BASE_ACCOUNT = 'base_account';
    public const AUTH_PAYMENT_METHOD_DEFERRED_INTEREST = 'deferred_interest';
    public const AUTH_PAYMENT_METHOD_DIRECT_DEBIT = 'direct_debit';
    public const AUTH_PAYMENT_METHOD_DIRECT_BANK_TRANSFER = 'direct_bank_transfer';
    public const AUTH_PAYMENT_METHOD_B2B_INVOICE = 'b2b_invoice';
    public const AUTH_PAYMENT_METHOD_CARD = 'card';
    public const AUTH_PAYMENT_METHOD_SLICE_IT_BY_CARD = 'slice_it_by_card';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingCategoryAllowableValues()
    {
        return [
            self::BILLING_CATEGORY_PAY_LATER,
            self::BILLING_CATEGORY_PAY_NOW,
            self::BILLING_CATEGORY_SLICE_IT,
            self::BILLING_CATEGORY_SLICE_IT_BY_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthPaymentMethodAllowableValues()
    {
        return [
            self::AUTH_PAYMENT_METHOD_INVOICE,
            self::AUTH_PAYMENT_METHOD_FIXED_AMOUNT,
            self::AUTH_PAYMENT_METHOD_PIX,
            self::AUTH_PAYMENT_METHOD_BASE_ACCOUNT,
            self::AUTH_PAYMENT_METHOD_DEFERRED_INTEREST,
            self::AUTH_PAYMENT_METHOD_DIRECT_DEBIT,
            self::AUTH_PAYMENT_METHOD_DIRECT_BANK_TRANSFER,
            self::AUTH_PAYMENT_METHOD_B2B_INVOICE,
            self::AUTH_PAYMENT_METHOD_CARD,
            self::AUTH_PAYMENT_METHOD_SLICE_IT_BY_CARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_category'] = $data['billing_category'] ?? null;
        $this->container['auth_payment_method'] = $data['auth_payment_method'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBillingCategoryAllowableValues();
        if (!is_null($this->container['billing_category']) && !in_array($this->container['billing_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billing_category', must be one of '%s'",
                $this->container['billing_category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthPaymentMethodAllowableValues();
        if (!is_null($this->container['auth_payment_method']) && !in_array($this->container['auth_payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_payment_method', must be one of '%s'",
                $this->container['auth_payment_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_category
     *
     * @return Enum|null
     */
    public function getBillingCategory()
    {
        return $this->container['billing_category'];
    }

    /**
     * Sets billing_category
     *
     * @param Enum|null $billing_category billing_category
     *
     * @return self
     */
    public function setBillingCategory($billing_category)
    {
        $allowedValues = $this->getBillingCategoryAllowableValues();
        if (!is_null($billing_category) && !in_array($billing_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billing_category', must be one of '%s'",
                    $billing_category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_category'] = $billing_category;

        return $this;
    }

    /**
     * Gets auth_payment_method
     *
     * @return Enum|null
     */
    public function getAuthPaymentMethod()
    {
        return $this->container['auth_payment_method'];
    }

    /**
     * Sets auth_payment_method
     *
     * @param Enum|null $auth_payment_method auth_payment_method
     *
     * @return self
     */
    public function setAuthPaymentMethod($auth_payment_method)
    {
        $allowedValues = $this->getAuthPaymentMethodAllowableValues();
        if (!is_null($auth_payment_method) && !in_array($auth_payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_payment_method', must be one of '%s'",
                    $auth_payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_payment_method'] = $auth_payment_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


